#! /usr/bin/python

## This script runs under python 3.x

## The objective of this script is to detect fusion transcript
## from cufflinks/stringtie assembled GTF file

## If a transcript C contain some exons belong to A, and some exons
## belong to B, it will output as a candidate fusion transcript
## It's bettter filter these condidates by expression (TPM generated by salmon)

import sys, os
import gffutils
import getopt
##import numpy as np

def parse_args (argv):
    gtf_file = ""
    out_file = ""
    try:
        opts, args = getopt.getopt(argv,"hi:o:",["gtffile=","output="])
    except getopt.GetoptError:
        print("GTF_fusion.py -i <gtf> -o <output>")
        sys.exit(2)
    for opt, arg in opts:
        if opt == "-h":
            print ("Useage: input cufflinks gtf", "\n",
                   "GTF_fusion.py -i <gtf> -o <output>", "\n")
            sys.exit()
        elif opt in ("-i"):
            gtf_file = arg
        elif opt in ("-o"):
            out_file = arg

    print ("GTF file is %s" % gtf_file)
    print ("Output is %s" % out_file)
    return gtf_file, out_file

def make_GFFdb (gtf_file):
    # Define input as gtf or gff
    if ".gtf" in gtf_file:
        # gtf of gffcompare output already has transcript feature,
        # so disable_infer_transcripts was set to True
        db = gffutils.create_db(data=gtf_file,
                                dbfn="tmpGFF.db",
                                force=True,
                                id_spec={"gene": "gene_id",
                                         "transcript": "transcript_id"},
                                keep_order=True, merge_strategy="merge",
                                sort_attribute_values=True,
                                disable_infer_transcripts=True)
    elif ".gff" in gtf_file:
        sys.exit("Only GTF file was supported")

def compare_two_regions (A_start, A_end, B_start, B_end):
    # This function is to compare two exons
    
    # If their overlapped region accounts for
    # more than 90% of both of them, they
    # will be treated as the same exon, and
    # return 0

    # If their overlapped region accounts for
    # more than 90% of only one of them,
    # they are one containing another,
    # retuen 1

    # If their overlapped region accounts for
    # less than 90% of both, they will be
    # two distinct exons,
    # return 2

    A_region = set(range(A_start, A_end+1))
    B_region = set(range(B_start, B_end+1))
    lenOverlap = len(A_region & B_region)
    if (lenOverlap/len(A_region) >=0.9 and
        lenOverlap/len(B_region) >=0.9):
        return 0
    elif (lenOverlap/len(A_region) >=0.9 and
          lenOverlap/len(B_region) <0.9):
        return 1
    elif (lenOverlap/len(A_region) <0.9 and
          lenOverlap/len(B_region) >=0.9):
        return 1
    elif (lenOverlap/len(A_region) <0.9 and
          lenOverlap/len(B_region) <0.9):
        return 2
    else:
        print ("There is some problem on compare_two_exons")

def get_fusion (GFFdb, TranscriptFeature, compared_transFeature):
    ## Input a transcript feature, search its exons from all the other
    ## transcripts in GFFdb

    ## Store transcriptFeature exons
    exons = list(GFFdb.children(TranscriptFeature,
                                featuretype = ("exon"),
                                order_by = "start"))
    outList = [] # store possible fusion A or B
    mRNA_overlap = ""
    mRNA = compared_transFeature

    for i in exons:
        A_start = i.start
        A_end = i.stop
        A_strand = i.strand
        A_chrom = i.chrom
        exon_num = exons.index(i)

        ## Since cufflinks GTF doesn't contain InterChromal fusion transcripts
        ## Only detect transcripts on the same chromosome
        if mRNA.id != TranscriptFeature.id and \
           mRNA.chrom == A_chrom and \
           mRNA.strand == A_strand:
            ## First check mRNA region overlap
            mRNA_overlap = compare_two_regions(TranscriptFeature.start, TranscriptFeature.stop,
                                               mRNA.start, mRNA.stop)
            if mRNA_overlap == 1:
                for k in GFFdb.children(mRNA, featuretype = "exon",
                                        order_by = "start"):
                    if compare_two_regions(A_start, A_end, k.start, k.end) == 0 or \
                       compare_two_regions(A_start, A_end, k.start, k.end) == 1:
                        outList.append(mRNA.id)

    return outList



def main ():
    gtf_file, out_file = parse_args(sys.argv[1:])
    make_GFFdb(gtf_file)
    outfn = open(out_file, "w")
    db = gffutils.FeatureDB('tmpGFF.db', keep_order=True)
    transList = []
    for mRNA in db.features_of_type("transcript", order_by="start"):
        transList.append(mRNA)

    print("Total mRNA: ", len(transList))
    for i in range(len(transList)):
        print("Processiong [",i+1,"]: ", transList[i].id)
        fusion = []
        for q in range(max(0,i-25), min(i+26, len(transList))):
            outList = []
            compared_transFeature = transList[q]
            outList = get_fusion(db, transList[i], compared_transFeature)
            fusion.extend(outList)

        fusion = list(set(fusion))
        print(fusion)
        ## Condense fusion transcript
        deduction = ""
        removeID = []
        for m in range(len(fusion)):
            for n in range(m+1, len(fusion)):
                deduction = compare_two_regions(db[fusion[m]].start, db[fusion[m]].end,
                                                db[fusion[n]].start, db[fusion[n]].end)
                if deduction == 0 or deduction == 1:
                    removeID.append(fusion[n])

        #print(fusion)
        removeID = list(set(removeID))
        print(removeID)
        for m in removeID:
            fusion.remove(m)
        print(fusion)
        if len(fusion) >= 2:
            print(transList[i].id,"\t", fusion, file = outfn)
    outfn.close()
    #os.remove("tmpGFF.db")

if __name__ == "__main__":
    main()
